// testCncToolPathGenerator.js
//
// add this script to package.json
// "exp": "babel-node experiment/testCncToolPathGenerator.js",

import fs from 'fs';
import path from 'path';
import xml2js from 'xml2js';
import { CncToolPathGenerator } from '../src/app/lib/ToolPathGenerator';
import SvgReader from '../src/app/lib/svgreader/svg_reader';


function testBoundaries(boundaries) {
    const options = {
        toolDiameter: 2,
        toolAngle: 180,
        workSpeed: 300,
        jogSpeed: 800,
        plungeSpeed: 500,
        pathType: 'outline',
        originWidth: 256,
        originHeight: 256,
        sizeWidth: 25.6,
        sizeHeight: 25.6,
        targetDepth: 2.2,
        stepDown: 2.2,
        safetyHeight: 3,
        stopHeight: 10,
        clip: true,
        optimizePath: true,
        enableTab: false,
        tabWidth: 2,
        tabHeight: -1,
        tabSpace: 24
    };

    const toolPathGenerator = new CncToolPathGenerator(
        boundaries,
        options
    );

    const gcode = toolPathGenerator.generateGcode();

    console.log('Generated G-code:');
    console.log(gcode.slice(0, 1000));

    const path = './test.cnc';
    fs.writeFile(path, gcode, () => {
        console.log(`written G-code to file ${path}`);
    });
}

// circle
// const boundaries = { '#000000': [[[111.28333333333333, 63.22916666666667], [111.28333333333333, 63.22916666666667], [111.21747373453776, 65.83091103108724], [110.70015541585286, 70.92918247477213], [109.68994598388673, 75.86592315673829], [108.21233469645183, 80.61564381917319], [106.29281081136068, 85.15285520426433], [103.95686358642578, 89.45206805419922], [101.22998227945963, 93.48779311116536], [98.13765614827474, 97.23454111735026], [94.70537445068359, 100.66682281494141], [90.9586264444987, 103.7591489461263], [86.92290138753255, 106.48603025309245], [82.62368853759766, 108.82197747802735], [78.08647715250652, 110.74150136311849], [73.33675649007162, 112.21911265055338], [68.40001580810546, 113.22932208251953], [63.30174436442057, 113.74664040120443], [60.7, 113.8125], [60.7, 113.8125], [58.098255635579434, 113.74664040120443], [52.999984191894534, 113.22932208251953], [48.06324350992839, 112.21911265055338], [43.313522847493495, 110.74150136311849], [38.776311462402354, 108.82197747802735], [34.47709861246746, 106.48603025309245], [30.441373555501304, 103.7591489461263], [26.694625549316406, 100.66682281494141], [23.262343851725266, 97.23454111735026], [20.170017720540365, 93.48779311116536], [17.44313641357422, 89.45206805419922], [15.107189188639323, 85.15285520426433], [13.187665303548178, 80.61564381917319], [11.710054016113283, 75.86592315673829], [10.699844584147135, 70.92918247477213], [10.182526265462238, 65.83091103108724], [10.116666666666667, 63.22916666666667], [10.116666666666667, 63.22916666666667], [10.182526265462238, 60.6274223022461], [10.699844584147135, 55.5291508585612], [11.710054016113283, 50.59241017659505], [13.187665303548178, 45.842689514160156], [15.107189188639323, 41.305478129069016], [17.44313641357422, 37.00626527913412], [20.170017720540365, 32.970540222167976], [23.262343851725266, 29.223792215983078], [26.694625549316406, 25.79151051839193], [30.441373555501304, 22.69918438720703], [34.47709861246746, 19.972303080240884], [38.776311462402354, 17.63635585530599], [43.313522847493495, 15.716831970214844], [48.06324350992839, 14.23922068277995], [52.999984191894534, 13.229011250813802], [58.098255635579434, 12.711692932128905], [60.7, 12.645833333333334], [60.7, 12.645833333333334], [63.30174436442057, 12.711692932128905], [68.40001580810546, 13.229011250813802], [73.33675649007162, 14.23922068277995], [78.08647715250652, 15.716831970214844], [82.62368853759766, 17.63635585530599], [86.92290138753255, 19.972303080240884], [90.9586264444987, 22.69918438720703], [94.70537445068359, 25.79151051839193], [98.13765614827474, 29.223792215983078], [101.22998227945963, 32.970540222167976], [103.95686358642578, 37.00626527913412], [106.29281081136068, 41.305478129069016], [108.21233469645183, 45.842689514160156], [109.68994598388673, 50.59241017659505], [110.70015541585286, 55.5291508585612], [111.21747373453776, 60.6274223022461], [111.28333333333333, 63.22916666666667], [111.28333333333333, 63.22916666666667]]] };

// square
// const boundaries = { '#000000': [[[0, 0], [0, 100], [100, 100], [100, 0], [0, 0]], [[20, 20], [20, 80], [80, 80], [80, 20], [20, 20]]] };

// Bad Case
// const boundaries = { '#000000': [[[0, 0], [0, 120], [120, 120], [120, 0]], [[109.326, 30.637], [108.802373046875, 32.209625], [108.13204101562499, 41.15546875], [108.013568359375, 52.9273125], [108.32245776367188, 60.067705078124995], [108.73165063476563, 62.643513671875], [109, 63], [109.44634375000001, 62.011281249999996], [109.92165625000001, 54.23259375], [109.945, 47.53], [110.06162499999999, 36.301375], [110.482, 31.03], [110.840953125, 30.39934375], [110.356984375, 30.23490625], [109.326, 30.637]]] };

// Bad Case
// const boundaries = { '#0': [[[0, 0]]] };

// testBoundaries(boundaries);

// SVG self lifting
if (false) {
    const filePath = path.resolve('./src/web/images/snap-logo-square-256x256.png.svg');
    fs.readFile(filePath, 'utf8', (err, xml) => {
        if (err) {
            console.log(err);
        } else {
            xml2js.parseString(xml, (err, node) => {
                let svgReader = new SvgReader(0.08);
                svgReader.parse(node);
                const boundaries = svgReader.boundaries;

                testBoundaries(boundaries);
            });
        }
    });
}
